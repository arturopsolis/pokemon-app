import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class Pokemon3DService {
  private apiUrl = 'https://pokemon3d-api.onrender.com/v1/Regular'; // ‚úÖ Endpoint correcto

  constructor(private http: HttpClient) {}

  getPokemon3DModel(name: string): Observable<string | null> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      tap((data) => console.log("üì° API Response:", data)), // üëÄ Para ver la respuesta de la API en la consola
      map((data) => {
        if (!Array.isArray(data) || data.length === 0) {
          console.error("‚ùå Error: API no devolvi√≥ una lista v√°lida", data);
          return null;
        }

        // üîπ Extraemos la lista de Pok√©mon del primer objeto en la respuesta
        const pokemonList = data[0]?.pokemon;
        if (!Array.isArray(pokemonList)) {
          console.error("‚ùå Error: No se encontr√≥ la clave 'pokemon' en la respuesta", data);
          return null;
        }

        // üîç Buscamos el Pok√©mon por nombre (ignorando may√∫sculas y min√∫sculas)
        const foundPokemon = pokemonList.find((p) =>
          p?.name?.toLowerCase() === name.toLowerCase()
        );

        if (foundPokemon && foundPokemon.model) {
          console.log(`‚úÖ Modelo encontrado para ${name}:`, foundPokemon.model);
          return foundPokemon.model; // ‚úÖ Retorna la URL del modelo 3D
        }

        console.warn(`‚ö†Ô∏è No se encontr√≥ modelo 3D para ${name}`);
        return null;
      }),
      catchError((err) => {
        console.error(`‚ùå Error fetching 3D model for ${name}`, err);
        return of(null);
      })
    );
  }
}